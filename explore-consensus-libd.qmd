---
title: "exploring-consensus"
format: 
    html:
      toc: true
      self-contained: true
      highlight-style: github
      code-line-numbers: true
editor: source
editor_options: 
  chunk_output_type: console
---

## Load packages

```{r}
suppressPackageStartupMessages({
  library(SpatialExperiment)
  library(dplyr)
  library(ggplot2)
  library(cowplot)
  library(clue)
  library(khroma)
  library(scran)
  library(limma)
  library(tibble)
  #library(googlesheets4)
  library(readr)
  library(ggrepel)
  library(mclust)
  library(pheatmap)
  # library(fastDummies)
})
```


## Load data

```{r}

datadir <- "data"
spe <- readRDS(file.path(datadir,
                         "obs_Br8100_151673_spe.RDS"))
# spe <- readRDS(file.path(datadir,
#                          "obs_Br8100_151673_spe_with_base_clusterings.RDS"))
df <- data.frame(barcode = spe$Row.names, 
                 label = spe$label)
spe <- readRDS(file.path(datadir,
                         "obs_Br8100_151673_spe_with_all_base_clusterings.RDS"))

cons <- read.csv(file.path(datadir,
                           "obs_Br8100_151673_consensus_r_stcc.tsv"), 
                 header = TRUE, row.names = 1, 
                 sep = "\t", check.names = FALSE)

all(rownames(cons) == colnames(spe))
colData(spe)

```


## Define functions

```{r}
source("utils.R")
```


## Visualize tree


```{r, fig.width=12, fig.height=12}

cd <- colData(spe)[,-c(1:5)]
stopifnot(all(df$barcode==colnames(spe)))
cd$label <- df$label

cd <- cd[,-grep("_MajorityVote", colnames(cd))]
cd <- cd[,-grep("_KModes", colnames(cd))]
cd <- cd[,-grep("_LCA", colnames(cd))]

arism <- calc_aris(cd)

ph <- pheatmap(arism)
```


## Find sweet spot on tree

```{r}
stats <- lapply(3:15, function(u) calc_summary(ph$tree_col, 
                                      arism, k=u)) %>% bind_rows

ggplot(stats, aes(x=number_distinct_methods, y=ari_block, 
                  shape = gt_in_group, colour = ari_to_truth)) + 
  geom_jitter(width=.1, height=.01, aes(size = number))

stats %>% 
  dplyr::filter(ari_block > .6, number_distinct_methods > 6) %>% 
  head(10)

```

## Pull out a good tradeoff

```{r}

ct <- cutree(ph$tree_col, k=12)
methods <- names(which(ct==1))

pheatmap(arism[methods,methods])



base_clusterings <- colData(spe)[,methods]
df <- colData(spe)[,c("row","col","label",methods)] %>% as.data.frame

system.time(consensus_lca <- diceR:::LCA(base_clusterings,
                             is.relabelled = FALSE, seed = 1))
#  user  system elapsed 
# 9.140   0.580   9.729 
spe$consensus_lca <- df$consensus_lca <- as.factor(consensus_lca)

system.time(consensus_kmodes <- diceR:::k_modes(base_clusterings,
                             is.relabelled = FALSE, seed = 1))
spe$consensus_kmodes <- df$consensus_kmodes <- as.factor(consensus_kmodes)
#  user  system elapsed 
# 1.443   0.054   1.816 

bcs <- base_clusterings %>% as.data.frame
# z <- dummy_cols(bcs, remove_first_dummy = FALSE,
#                 remove_selected_columns = TRUE)
# d <- dist(z, method="binary")

# align the classes, so we can calculate entropy for each spot
levs <- lapply(bcs, levels)

for(i in 2:ncol(bcs)){
  hung <- clue::solve_LSAP(table(bcs[,1], bcs[,i]), maximum = TRUE)
  lookup <- cbind(seq_along(hung), levs[[i]][hung])
  levels(bcs[,i]) <- lookup[order(lookup[,2]),1]
  bcs[,i] <- as.factor(as.character(bcs[,i]))
}

ps <- apply(bcs, 1, 
            function(u) table(factor(u, 
                                     levels = levels(bcs[,1])))) %>% t

df$entropy <- apply(ps, 1, calc_entropy)

ggplot(df, aes(x=row, y=col, colour=entropy)) +
  geom_point(size = 3) +
  theme_classic() +
  theme(legend.position = "bottom") +
  scale_colour_gradient(low="gray95", high="deeppink4") +
  scale_x_reverse(expand = expansion(0,1)) +
  scale_y_continuous(expand = expansion(0,1))


myscale1 <- c(color("muted")(7))
names(myscale1) <- levels(df$consensus_kmodes)


p <- ggplot(df, aes(x=row, y=col, colour=consensus_kmodes)) +
  geom_point(size = 2.5) +
  scale_colour_manual(values = myscale1) +
  theme_classic() +
  theme(legend.position = "bottom") +
  scale_x_reverse(expand = expansion(0,1)) +
  scale_y_continuous(expand = expansion(0,1))

myscale1 <- c(color("muted")(7))
names(myscale1) <- levels(df$consensus_lca)
  
q <- ggplot(df, aes(x=row, y=col, colour=consensus_lca)) +
  geom_point(size = 2.5) +
  scale_colour_manual(values = myscale1) +
  theme_classic() +
  theme(legend.position = "bottom") +
  scale_x_reverse(expand = expansion(0,1)) +
  scale_y_continuous(expand = expansion(0,1))


myscale1 <- c(color("muted")(7))
names(myscale1) <- levels(df$label)
  
r <- ggplot(df, aes(x=row, y=col, colour=label)) +
  geom_point(size = 2.5) +
  scale_colour_manual(values = myscale1) +
  theme_classic() +
  theme(legend.position = "bottom") +
  scale_x_reverse(expand = expansion(0,1)) +
  scale_y_continuous(expand = expansion(0,1))

# TODO: realign these clusters to the ground truth
cowplot::plot_grid(p,q, r, nrow=1)
  
```

## Overall view

```{r, fig.width=16, fig.height=12}


df1 <- cbind(df[,c("row","col","label","consensus_lca","consensus_kmodes")], bcs)

table(df1$consensus_lca, df1$label)
clue::solve_LSAP(table(df1$consensus_lca, df1$label), maximum = TRUE)

# levels(df1$label) <- c("4","2","1","5","7","3","6")
levels(df1$label) <- c("3","2","6","1","4","7","5")
# levels(df1$label) <- 1:7
# levels(df1$label) <- levels(df1$label)[order(levels(df1$label))]

myscale1 <- c(color("muted")(7))
names(myscale1) <- levels(df1$label)


ps <- lapply(c(methods,"consensus_lca",
               "consensus_kmodes","label"), function(u) {
  # lv <- levels(df[[u]])
  # myscale1 <- c(color("muted")(length(lv)))
  # names(myscale1) <- lv

  ggplot(df1, aes(x=row, y=col, colour=.data[[u]])) + geom_point(size = 2) +
  theme_classic() +
  theme(legend.position = "none") +
  xlab("") + ylab("") +
  scale_colour_manual(values = myscale1) +
  scale_x_reverse(expand = expansion(0,1)) +
  scale_y_continuous(expand = expansion(0,1)) +
    ggtitle(u)
})


plot_grid(plotlist = ps, nrow=3, ncol=7)


```

# Look at F-statistics

```{r}

cd <- colData(spe)

mm1 <- model.matrix(~label, data=cd)
mm2 <- model.matrix(~consensus_lca, data=cd)

mgv <- modelGeneVar(spe)
plot(mgv$mean, mgv$bio)
keep <- mgv$bio > 0; table(keep)

lcounts <- as.matrix(logcounts(spe[keep,]))

f1 <- lmFit(lcounts, mm1)
f1 <- eBayes(f1, trend = TRUE)
f2 <- lmFit(lcounts, mm2)
f2 <- eBayes(f2, trend = TRUE)

tt1 <- topTable(f1, coef=2:7, sort.by = "none", n = Inf)
tt2 <- topTable(f2, coef=2:7, sort.by = "none", n = Inf)

tt1 %>% arrange(desc(F)) %>% head(3)
tt2 %>% arrange(desc(F)) %>% head(3)

aac1 <- aggregateAcrossCells(spe, spe$label, 
                             subset.row = keep) %>% counts
aac2 <- aggregateAcrossCells(spe, spe$consensus_lca, 
                             subset.row = keep) %>% counts

head(aac1, 3)

# spot checks
all(rownames(f1$coefficients)==rownames(aac1))

ent1 <- apply(aac1, 1, calc_entropy)
ent2 <- apply(aac2, 1, calc_entropy)

df1 <- data.frame(tt1[,c("ID","F")], entropy=ent1)
df2 <- data.frame(tt2[,c("ID","F")], entropy=ent2)

all(df1$ID==df2$ID)

m <- merge(df1, df2, by = "ID", 
           suffixes = c(".manual", ".ensemble"))

head(m,3)

rc <- read_csv("Sarusan-project-spatial-marker-genes - LIBD.csv")

ggplot(m, aes(F.manual,F.ensemble)) + 
  geom_point() +
  scale_x_log10(limits=c(50,3300)) + 
  scale_y_log10(limits=c(50,3300)) +
  geom_abline(colour="blue") +
  geom_text_repel(data = m %>% 
                    filter(ID %in% rc$ID), aes(label = ID),
                  nudge_x = -.1, nudge_y = .1,
                  colour = "blue")



gt_col <- c("TRUE" = "grey20", 
            "FALSE" = "lightgrey")


genes <- c("MBP", "PCP4")
clusters <- c(6, 7)
titlabels <- c("consensus","consensus")
gt <- spe$consensus_lca
ps <- mapply(plotter_fun, genes, clusters, titlabels, SIMPLIFY = FALSE)


genes <- c("MBP", "PCP4")
clusters <- c("WM", "L5")
titlabels <- c("annotation","annotation")
gt <- spe$label
qs <- mapply(plotter_fun, genes, clusters, titlabels, SIMPLIFY = FALSE)



cowplot::plot_grid(ps[[1]], qs[[1]])

cowplot::plot_grid(ps[[2]], qs[[2]])


wm <- apply(f1$coefficients, 1, which.max)
table(wm)
tt1[wm==4 & tt1$F > 50,]


par(mfrow=c(2,1))
boxplot(logcounts(spe)["MBP",] ~ spe$consensus_lca,
        xlab = "consensus cluster", ylab = "MBP expression")
boxplot(logcounts(spe)["MBP",] ~ spe$label,
        xlab = "annotation cluster", ylab = "MBP expression")


par(mfrow=c(2,1))
boxplot(logcounts(spe)["PCP4",] ~ spe$consensus_lca,
        xlab = "consensus cluster", ylab = "PCP4 expression")
boxplot(logcounts(spe)["PCP4",] ~ spe$label,
        xlab = "annotation cluster", ylab = "PCP4 expression")

```


## 