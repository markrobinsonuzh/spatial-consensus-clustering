---
title: |
  Consensus clustering report \
  slice: `r basename(params$datadir)` \
  number-of-clusters: `r params$nclust`
format: 
    html:
      toc: true
      self-contained: true
      highlight-style: github
      code-line-numbers: true
      code-fold: true
editor: source
editor_options: 
  chunk_output_type: console
params:
  datadir: 'test'
  nclust: -1
  ref_clustering: "none"
  nmethod: -1
  ground_truth:
    - x
    - y
  nns: 6
  name: "noname"
---

## Retrieve parameters

```{r display-params}
params
datadir <- params$datadir
nclust <- params$nclust
ref_clustering <- params$ref_clustering
nmethod <- params$nmethod
gt <- params$ground_truth
k <- params$nns
name <- params$name

# # for testing
# datadir <- "data/C57BL6J-638850_6800"
# nclust <- 18
# ref_clustering <- "STAGATE_default_18"
# nmethod <- 10
# gt <- c("parcellation_structure","parcellation_substructure")
# k <- 6
# name <- "thalamus-6800"

```

## Packages / functions

```{r load-packages}
suppressPackageStartupMessages({
  library(SpatialExperiment)
  library(dplyr)
  library(ggplot2)
  library(cowplot)
  library(clue)
  library(khroma)
  library(scran)
  library(limma)
  library(tibble)
  library(readr)
  library(ggrepel)
  library(mclust)
  library(pheatmap)
  library(fastDummies)
  library(randomcoloR)
  library(reshape2)
})
source("utils.R")
```


## Load data

```{r load-data}
spe <- get_SpatialExperiment(file.path(datadir, "features.tsv"), 
                             file.path(datadir, "observations.tsv"), 
                             file.path(datadir, "coordinates.tsv"), 
                             file.path(datadir, "counts.mtx"))

# not sure this is the best normalization
spe <- logNormCounts(spe)
rownames(spe) <- rowData(spe)$gene_name

spe$row <- spatialCoords(spe)[,"x"]
spe$col <- spatialCoords(spe)[,"y"]

spe

suppressMessages(obs <- read_tsv(file.path(datadir, "observations.tsv"),
                                 show_col_types = FALSE))
colnames(obs)[1] <- "id"

ap <- apply(obs[,-1], 2, function(u) length(unique(u)))
ap[gt]

lf <- list.files(datadir, pattern = "combined_domains.tsv$", 
                 recursive = TRUE, full.names = TRUE)
names(lf) <- lf

unname(lf)

base_clusterings <- lapply(lf, function(u) {
  meth <- strsplit(u,"/", fixed = TRUE)[[1]][3:4] %>% 
    paste0(collapse = "_")
  meth <- gsub("_config","",meth) 
  suppressMessages(df <- read_tsv(u, show_col_types = FALSE))
  colnames(df)[1] <- "id"
  #cols <- grep("n_clusters", colnames(df), value = TRUE)
  df <- df %>% 
    #mutate(across(all_of(cols), as.factor)) %>%
    as.data.frame() %>%
    column_to_rownames("id")
  colnames(df) <- gsub("n_clusters_", paste0(meth,"_"), 
                       colnames(df))
  df
}) %>% bind_cols 

fn_stub <- paste0(name, "_", nclust)

```


## Smoothness-entropy of base clusterings

```{r smoothness-entropy, fig.width=8, fig.height=6, eval=TRUE}

# find number of actual clusters per column
real_n <- apply(base_clusterings, 2, 
                function(u) length(unique(u)))

# focus on just these clusterings
base_clusterings <- base_clusterings %>%
  dplyr::select(names(which(real_n==nclust))) %>%
  align_classes(ref_clustering)

coords <- colData(spe) %>% as.data.frame %>%
  rownames_to_column("id") %>% dplyr::select(id, row, col)

df <- base_clusterings %>%
  rownames_to_column("id") %>%
  left_join(coords, by = "id")

palette <- distinctColorPalette(nclust)
names(palette) <- 1:nclust


mse <- apply(base_clusterings, 2, 
             function(u) spot_entropy(coords[,c("row","col")], 
                                      u, k=k))
cm <- mse %>% colMeans
lv <- cm %>% sort %>% names

mse_m <- melt(mse, value.name = "entropy")
mse_m$Var2 <- factor(mse_m$Var2, levels=lv)

p <- ggplot(mse_m, aes(Var2, entropy)) + 
  geom_violin() +
  ylab(paste0("pointwise entropy (k=", k, ")")) +
  xlab("base clustering") +
  theme(axis.text.x = element_text(angle = 45,
                                   vjust = 1, hjust=1)) +
  geom_label(data = data.frame(Var2=names(cm), label=round(cm,4)),
             aes(Var2,cm,label=label), size = 2.5) +
  scale_y_sqrt() +
  ggtitle(paste0("Smoothness-entropy (", nclust, " clusters)"))

show(p)
ggsave(paste0(fn_stub, "_01_smoothness-entropy.pdf"), plot = p)
```

## Across-clusterings-entropy for selected clusterings

```{r across-clusterings-entropy, fig.width=10, fig.height=5.5}
keepers <- head(lv, nmethod)

lv <- levels(base_clusterings[[ref_clustering]])
ps <- apply(base_clusterings[,keepers], 1,
            function(u) table(factor(u,levels = lv))) %>% t
df$ent <- apply(ps, 1, calc_entropy)

q <- ggplot(df, aes(row,col,colour=ent)) +
  geom_point(size = 1) +
  scale_colour_gradient(low="white", high="deeppink4") +
  #theme_classic() +
  theme(legend.position = "bottom") +
  scale_x_continuous(expand = expansion(0,1)) +
  scale_y_continuous(expand = expansion(0,1)) +
  coord_fixed() +
  labs(title = paste0("Across-clusterings-entropy (", nclust, " clusters)"),
              subtitle = paste0(strwrap(paste0(keepers, 
                                               collapse = " "), width=100),
                                collapse="\n")) +
  theme(plot.subtitle=element_text(size=8))
show(q)

ggsave(paste0(fn_stub, "_02-across-clusterings-entropy.pdf"), plot = q)
```

## Base clusterings

```{r base-clusterings-viz, fig.width=10, fig.height=10, eval=TRUE}

palette <- distinctColorPalette(nclust)
names(palette) <- 1:nclust

ps <- lapply(keepers, function(u) {
  ggplot(df, aes(x=row, y=col, colour=.data[[u]])) + 
    geom_point(size = .3) +
    theme_classic() +
    theme(legend.position = "none") +
    xlab("") + ylab("") +
    scale_colour_manual(values = palette) +
    scale_x_continuous(expand = expansion(0,1)) +
    scale_y_continuous(expand = expansion(0,1)) +
    ggtitle(u) + coord_fixed()
})
z <- plot_grid(plotlist = ps, nrow=4, ncol=3)
show(z)

ggsave(paste0(fn_stub, "_03-base-clusterings.pdf"), plot = z)

```


## Similarity: all base clusterings with `r params$nclust` clusters


```{r all-clusterings, fig.height=7, fig.width=9}
aris_all <- calc_aris(cbind(base_clusterings,obs[,gt]))
ph_all <- pheatmap(aris_all, fontsize = 12)
save_pheatmap_pdf(ph_all, paste0(fn_stub, "_04-heatmap-all.pdf"), width = 9)
```


## Similarity: "smoothest" `r params$nmethod` clusterings (with `r params$nclust` clusters)

```{r smoothest-clusterings, fig.height=7, fig.width=8}
aris_sel <- calc_aris(cbind(base_clusterings[,keepers],
                            obs[,gt]))
ph_sel <- pheatmap(aris_sel, fontsize = 12)
save_pheatmap_pdf(ph_sel, paste0(fn_stub, "_05-heatmap-selected.pdf"), width = 8)
```

## Form consensus

```{r form-consensus, fig.height=6, fig.width=10}

# # bit slow
system.time(df$consensus_lca <- diceR:::LCA(base_clusterings[,keepers],
                             is.relabelled = FALSE, seed = 100))

saveRDS(df, paste0("df_",gsub(" ","-",date()),".rds"))
spe$consensus_lca <- df$consensus_lca

system.time(df$consensus_kmodes <- diceR:::k_modes(base_clusterings[,keepers],
                             is.relabelled = FALSE, seed = 1))
saveRDS(df, paste0("df_",gsub(" ","-",date()),".rds"))
spe$consensus_kmodes <- factor(df$consensus_kmodes)

df <- df %>% left_join(obs %>% dplyr::select(id, all_of(gt)), by="id")

plot_cols <- c("consensus_lca","consensus_kmodes", gt)

pal1 <- distinctColorPalette(nclust)
names(pal1) <- 1:nclust
# pal2 <- distinctColorPalette(max(ap[gt]))
# names(pal2) <- obs %>% pull(names(ap[gt][which.max(ap[gt])])) %>% unique
gt_cats <- unique(as.character(obs[,gt] %>% as.matrix))
pal2 <- distinctColorPalette(length(gt_cats))
names(pal2) <- gt_cats
palette <- c(pal1, pal2)

ps <- lapply(plot_cols, function(u) {
  se <- spot_entropy(coords[,c("row","col")],
                     df[[u]], k=k)
  ggplot(df, aes(x=row, y=col, colour=as.factor(.data[[u]]))) +
    geom_point(size = 1) +
    theme_classic() +
    theme(legend.position = "none") +
    xlab("") + ylab("") +
    scale_colour_manual(values = palette) +
    scale_x_continuous(expand = expansion(0,1)) +
    scale_y_continuous(expand = expansion(0,1)) +
    ggtitle(paste0(u, " (avg-entropy=", 
                   round(mean(se),4), ")")) +
    coord_fixed()
})

x <- plot_grid(plotlist = ps, ncol=2)
show(x)
ggsave(paste0(fn_stub, "_06-consensus.pdf"), plot = x, 
       width = 10, height = 6)

```

## sessionInfo()

```{r sessioninfo}
sessionInfo()
```

