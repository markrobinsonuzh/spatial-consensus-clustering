---
title: "exploring-consensus: thalamus"
format: 
    html:
      toc: true
      self-contained: true
      highlight-style: github
      code-line-numbers: true
editor: source
editor_options: 
  chunk_output_type: console
---

## Load packages

```{r}
suppressPackageStartupMessages({
  library(SpatialExperiment)
  library(dplyr)
  library(ggplot2)
  library(cowplot)
  library(clue)
  library(khroma)
  library(scran)
  library(limma)
  library(tibble)
  #library(googlesheets4)
  library(readr)
  library(ggrepel)
  library(mclust)
  library(pheatmap)
  library(fastDummies)
  library(randomcoloR)
})
```


## Define functions

```{r}
source("utils.R")
```


## Load data

```{r}

datadir <- "data/C57BL6J-638850_7200/"

coords <- read_tsv(file.path(datadir, "coordinates.tsv"), 
                   col_names = c("id","x","y","z"), 
                   skip = 1)

labels <- read_tsv(file.path(datadir, "labels.tsv"),
                   col_names = c("id","label","label_confidence"),
                   skip = 1)
# 
obs <- read_tsv(file.path(datadir, "observations.tsv"),
                   col_names = c("id","brain_section_label","average_correlation_score",
                                 "class","cluster","cluster_alias","neurotransmitter",
                                 "parcellation_division","parcellation_structure",
                                 "parcellation_substructure","subclass","supertype"),
                   skip = 1)

apply(obs, 2, function(u) length(unique(u)))
table(obs$class)
table(obs$parcellation_division)
table(obs$class, obs$neurotransmitter)
table(obs$subclass)
table(obs$parcellation_structure)
table(obs$parcellation_substructure)


lf <- list.files(".", pattern = "combined_domains.tsv$", 
                 recursive = TRUE, full.names = TRUE)


base_clusterings <- lapply(lf, function(u) {
  meth <- strsplit(u,"/", fixed = TRUE)[[1]][4:5] %>% 
    paste0(collapse = "_")
  meth <- gsub("_config","",meth) 
  df <- read_tsv(u, col_names = c("id", paste0("n_clusters_",4:20)),
           show_col_types = FALSE, skip = 1) %>%
    mutate(n_clusters_15 = as.factor(n_clusters_15),
           n_clusters_20 = as.factor(n_clusters_20)) %>%
    dplyr::select(id, contains("_1"), contains("_20")) %>%
    column_to_rownames("id") %>%
    as.data.frame
  colnames(df) <- gsub("n_clusters_", paste0(meth,"_"), 
                       colnames(df))
  df
}) %>% bind_cols 

```


## Look at base clusterings

```{r, fig.width=16, fig.height=12}


base_clusterings_20 <- base_clusterings %>%
  select(dplyr::contains("_20")) %>%
  align_classes(ref = "SEDR_default_20")

df <- base_clusterings_20 %>%
  rownames_to_column("id") %>%
  left_join(coords)

palette <- distinctColorPalette(20)
names(palette) <- 1:20

# look at 6 NNs, entropy of their clusters
mse <- apply(base_clusterings_20, 2, 
             function(u) mean(spot_entropy(coords[,c("x","y")], u, k=6))) %>% sort

mse


df_mse <- data.frame(mse) %>% 
  rownames_to_column("id") %>%
  mutate(id = factor(id, levels=id))

ggplot(df_mse, aes(id, mse)) + geom_point(size = 4) + 
  ylab("mean spot entropy") + 
  xlab("base clustering") +
  theme(axis.text.x = element_text(angle = 45, 
                                   vjust = 1, hjust=1))


keepers <- head(mse, 7)


lv <- levels(base_clusterings_20$SEDR_dlpfc_20)
ps <- apply(base_clusterings_20[,names(keepers)], 1,
            function(u) table(factor(u,levels = lv))) %>% t
df$ent <- apply(ps, 1, calc_entropy)

ggplot(df, aes(x,y,colour=ent)) + 
  geom_point(size = 3) +
  scale_colour_gradient(low="gray95", high="deeppink4") +
  theme_classic() +
  theme(legend.position = "bottom") +
  scale_x_continuous(expand = expansion(0,1)) +
  scale_y_continuous(expand = expansion(0,1))


ps <- lapply(names(mse), function(u) {
  ggplot(df, aes(x=x, y=y, colour=.data[[u]])) + geom_point(size = 1) +
  theme_classic() +
  theme(legend.position = "none") +
  xlab("") + ylab("") +
  scale_colour_manual(values = palette) +
  scale_x_continuous(expand = expansion(0,1)) +
  scale_y_continuous(expand = expansion(0,1)) +
    ggtitle(u)
})

plot_grid(plotlist = ps, nrow=3, ncol=5)

# base_clusterings_20 <- base_clusterings %>%
#   select(contains("_20")) %>%
#   align_classes(ref = "SEDR_default_20")
# 
# df <- base_clusterings_20 %>%
#   rownames_to_column("id") %>%
#   left_join(coords)
# 
# palette <- distinctColorPalette(20)
# names(palette) <- 1:20
# 
# mse <- apply(base_clusterings_20, 2, 
#              function(u) mean(spot_entropy(coords[,c("x","y")], u, k=6))) %>% sort
# 
# ps <- lapply(names(mse), function(u) {
#   ggplot(df, aes(x=x, y=y, colour=.data[[u]])) + geom_point(size = 1) +
#   theme_classic() +
#   theme(legend.position = "none") +
#   xlab("") + ylab("") +
#   scale_colour_manual(values = palette) +
#   scale_x_continuous(expand = expansion(0,1)) +
#   scale_y_continuous(expand = expansion(0,1)) +
#     ggtitle(u)
# })
# 
# plot_grid(plotlist = ps, nrow=3, ncol=5)
# 

```


## Visualize tree


```{r, fig.width=16, fig.height=12}

my_base_clusterings <- base_clusterings %>%
  dplyr::select(contains("_18"), contains("_20"))


cols <- sapply(gsub("_20","_",names(keepers)), function(u) {
  grep(u, colnames(my_base_clusterings))  
}, simplify = FALSE)

cols <- cols %>% unlist %>% unique


arism <- calc_aris(cbind(my_base_clusterings[,cols], 
                         obs[,c("parcellation_structure",
                                "parcellation_substructure")]))



ph <- pheatmap(arism)


df <- my_base_clusterings[,cols] %>%
  rownames_to_column("id") %>%
  left_join(coords)


# bit slow
system.time(df$consensus_lca <- diceR:::LCA(my_base_clusterings[,cols],
                             is.relabelled = FALSE, seed = 1))
#    user  system elapsed 
# 315.595  10.529 327.190 

system.time(df$consensus_kmodes <- diceR:::k_modes(my_base_clusterings[,cols],
                             is.relabelled = FALSE, seed = 1))

df <- cbind(df, obs[,c("parcellation_structure",
                       "parcellation_substructure")])

df$parcellation_structure <- factor(df$parcellation_structure)
levels(df$parcellation_structure) <- 1:length(levels(df$parcellation_structure))
df$parcellation_substructure <- factor(df$parcellation_substructure)
levels(df$parcellation_substructure) <- 1:length(levels(df$parcellation_substructure))


palette <- distinctColorPalette(20)
names(palette) <- 1:20

plot_cols <- c(colnames(my_base_clusterings[,cols]),
               "consensus_kmodes", "consensus_lca",
               "parcellation_division","subclass")

ps <- lapply(plot_cols, function(u) {
  ggplot(df, aes(x=x, y=y, colour=as.factor(.data[[u]]))) + geom_point(size = 1) +
  theme_classic() +
  theme(legend.position = "none") +
  xlab("") + ylab("") +
  scale_colour_manual(values = palette) +
  scale_x_continuous(expand = expansion(0,1)) +
  scale_y_continuous(expand = expansion(0,1)) +
    ggtitle(u)
})

plot_grid(plotlist = ps, nrow=4, ncol=5)


```


## Find sweet spot on tree

```{r}
# stats <- lapply(3:15, function(u) calc_summary(ph$tree_col, 
#                                       arism, k=u)) %>% bind_rows
# 
# ggplot(stats, aes(x=number_distinct_methods, y=ari_block, 
#                   shape = gt_in_group, colour = ari_to_truth)) + 
#   geom_jitter(width=.1, height=.01, aes(size = number))
# 
# stats %>% 
#   dplyr::filter(ari_block > .6, number_distinct_methods > 6) %>% 
#   head(10)

```


## Calculate cell-wise entropy based on n=15

```{r}

# 
# 
# ph <- pheatmap(arism)
# 
# 
# lv <- levels(base_clusterings_15$SEDR_default_15)
# ps <- apply(base_clusterings_15, 1, 
#             function(u) table(factor(u,levels = lv))) %>% t
# 
# df$ents <- apply(ps, 1, calc_entropy)
# 
# ggplot(df, aes(x=x, y=y, colour=ents)) +
#   geom_point(size = 3) +
#   theme_classic() +
#   theme(legend.position = "bottom") +
#   scale_colour_gradient(low="gray95", high="deeppink4") +
#   scale_x_continuous(expand = expansion(0,1)) +
#   scale_y_continuous(expand = expansion(0,1))
# 


```

## sessionInfo()

```{r}
sessionInfo()
```

